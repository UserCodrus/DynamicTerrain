#pragma once

#include "CoreMinimal.h"

// The base class for noise data
class Noise
{
public:
	uint32 GetWidth() const;
	uint32 GetHeight() const;

	virtual void Scale(uint32 SampleWidth, uint32 SampleHeight) = 0;

protected:
	uint32 Width = 0;
	uint32 Height = 0;

	float ScaleX = 0.0f;
	float ScaleY = 0.0f;
};

// Noise generated by creating a grid of gradient vectors
class GradientNoise : public Noise
{
public:
	GradientNoise(uint32 NewWidth, uint32 NewHeight, uint32 Seed);
	GradientNoise(const GradientNoise& Copy);
	virtual ~GradientNoise();

	virtual void Scale(uint32 SampleWidth, uint32 SampleHeight) override;

	// Get the gradient at a given grid point
	FVector2D GetGradient(uint32 X, uint32 Y) const;

	// Get Perlin noise at the specified coordinate
	float Perlin(float X, float Y) const;

protected:
	FVector2D* Gradient = nullptr;
};

// Noise generated by creating a grid of random values
class ValueNoise : public Noise
{
public:
	ValueNoise() {};
	// Random value noise
	ValueNoise(uint32 NewWidth, uint32 NewHeight, uint32 Seed);
	// Generate noise with the diamond-square algorithm
	ValueNoise(uint32 Size, uint32 Seed);
	ValueNoise(const ValueNoise& Copy);
	virtual ~ValueNoise();

	virtual void Scale(uint32 SampleWidth, uint32 SampleHeight) override;

	// Get the value at a given grid point
	float GetValue(uint32 X, uint32 Y) const;

	// Bilinear interpolated noise
	virtual float Linear(float X, float Y) const;
	// Cosine interpolated noise
	virtual float Cosine(float X, float Y) const;
	// Cubic interpolated noise
	virtual float Cubic(float X, float Y) const;

protected:
	float* Value = nullptr;
};

// Random points generated in a 2D space
class PointNoise : public Noise
{
public:
	PointNoise() {};
	// Generate noise in a rectangle
	PointNoise(uint32 XWidth, uint32 YWidth, uint32 NumPoints, uint32 Seed);
	// Generate noise in a cirlce
	PointNoise(uint32 Radius, uint32 NumPoints, uint32 Seed);
	virtual ~PointNoise() {};

	virtual void Scale(uint32 SampleWidth, uint32 SampleHeight) override;

	// Get the nearest point to a given location
	virtual inline FVector2D GetNearest(FVector2D Location) const;
	// Get the distance from a given point to the nearest point
	virtual inline float GetNearestDistance(FVector2D Location) const;

	// Sample point noise at the given coordinates
	virtual float Dot(float X, float Y) const;
	// Sample raw Worley noise at the given coordinates
	virtual float Worley(float X, float Y) const;

	virtual const TArray<FVector2D>& GetPoints();

protected:
	TArray<FVector2D> Points;
};

// Noise generated by plotting random points within each cell of a unit grid
class UniformPointNoise : public PointNoise
{
public:
	UniformPointNoise(uint32 NewWidth, uint32 NewHeight, uint32 Seed);
	virtual ~UniformPointNoise() {};

	virtual inline FVector2D GetNearest(FVector2D Location) const override;
	virtual inline float GetNearestDistance(FVector2D Location) const override;
};

// Random points generated with Poisson disk sampling
class PoissonPointNoise : public PointNoise
{
public:
	// Generate random noise in a rectangle
	PoissonPointNoise(uint32 SpaceWidth, uint32 SpaceHeight, float SampleRadius, uint32 NumPoints, uint32 Seed);
	// Generate random noise in a circle
	PoissonPointNoise(uint32 SpaceRadius, float SampleRadius, uint32 NumPoints, uint32 Seed);
	// Fill a rectangle with random points
	PoissonPointNoise(uint32 SpaceWidth, uint32 SpaceHeight, float SampleRadius, uint32 Seed);
	// Fill a circle with random points
	PoissonPointNoise(uint32 SpaceRadius, float SampleRadius, uint32 Seed);
	virtual ~PoissonPointNoise() {};

	virtual inline FVector2D GetNearest(FVector2D Location, float SearchRadius) const;
	virtual inline float GetNearestDistance(FVector2D Location, float SearchRadius) const;

protected:
	// Create the sorting grid
	void InitializeSortingGrid(float MinRadius);
	// Add a point to the sorting grid
	inline void SortPoint(int32 PointIndex);

	// The size of each cell in the sorting grid
	float GridBound;
	// The dimensions of the sorting grid
	uint32 GridWidth, GridHeight;
	// A grid to store points for nearest neighbor searches
	TArray<int32> SortingGrid;
};