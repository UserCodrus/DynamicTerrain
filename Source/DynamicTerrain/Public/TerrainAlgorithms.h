#pragma once

#include "CoreMinimal.h"

// The base class for noise data
class Noise
{
public:
	uint32 GetWidth() const;
	uint32 GetHeight() const;

	virtual void Scale(uint32 SampleWidth, uint32 SampleHeight) = 0;

protected:
	uint32 Width = 0;
	uint32 Height = 0;

	float ScaleX = 0.0f;
	float ScaleY = 0.0f;
};

// Noise generated by creating a grid of gradient vectors
class GradientNoise : public Noise
{
public:
	GradientNoise(uint32 NewWidth, uint32 NewHeight, uint32 Seed);
	GradientNoise(const GradientNoise& Copy);
	virtual ~GradientNoise();

	virtual void Scale(uint32 SampleWidth, uint32 SampleHeight) override;

	// Get the gradient at a given grid point
	FVector2D GetGradient(uint32 X, uint32 Y) const;

	// Get Perlin noise at the specified coordinate
	float Perlin(float X, float Y) const;

protected:
	FVector2D* Gradient = nullptr;
};

// Noise generated by creating a grid of random values
class ValueNoise : public Noise
{
public:
	ValueNoise() {};
	ValueNoise(uint32 NewWidth, uint32 NewHeight, uint32 Seed);
	ValueNoise(const ValueNoise& Copy);
	virtual ~ValueNoise();

	virtual void Scale(uint32 SampleWidth, uint32 SampleHeight) override;

	// Get the value at a given grid point
	float GetValue(uint32 X, uint32 Y) const;

	// Bilinear interpolated noise
	virtual float Linear(float X, float Y) const;
	// Cosine interpolated noise
	virtual float Cosine(float X, float Y) const;
	// Cubic interpolated noise
	virtual float Cubic(float X, float Y) const;

protected:
	float* Value = nullptr;
};

// Value noise generated using the diamond square algorithm
class PlasmaNoise : public ValueNoise
{
public:
	PlasmaNoise(uint32 Size, uint32 Seed);
	PlasmaNoise(const PlasmaNoise& Copy);
};

// Random points generated in a 2D space
class PointNoise : public Noise
{
public:
	PointNoise() {};
	PointNoise(uint32 XWidth, uint32 YWidth, uint32 NumPoints, uint32 Seed);
	PointNoise(const PointNoise& Copy);
	virtual ~PointNoise() {};

	virtual void Scale(uint32 SampleWidth, uint32 SampleHeight) override;

	// Get the nearest point to a given location
	virtual inline FVector2D GetNearest(FVector2D Location) const;

	// Sample point noise at the given coordinates
	virtual float Dot(float X, float Y) const;
	// Sample raw Worley noise at the given coordinates
	virtual float Worley(float X, float Y) const;

	virtual const TArray<FVector2D>& GetPoints();

protected:
	TArray<FVector2D> Points;
};

// Random points generate in a circle
class RandomCirclePointNoise : public PointNoise
{
public:
	RandomCirclePointNoise() {};
	RandomCirclePointNoise(uint32 Radius, uint32 NumPoints, uint32 Seed);
	virtual ~RandomCirclePointNoise() {};
};

// Noise generated by choosing random points in a given area
class ScatteredPointNoise : public Noise
{
public:
	ScatteredPointNoise() {};
	ScatteredPointNoise(uint32 XWidth, uint32 YWidth, uint32 Points, uint32 Seed);
	ScatteredPointNoise(const ScatteredPointNoise& Copy);
	virtual ~ScatteredPointNoise();

	virtual void Scale(uint32 SampleWidth, uint32 SampleHeight) override;

	// Get the nearest point to a given location
	virtual inline FVector2D GetNearest(FVector2D Location) const;

	// Sample point noise at the given coordinates
	virtual float Dot(float X, float Y) const;
	// Sample raw Worley noise at the given coordinates
	virtual float Worley(float X, float Y) const;

	virtual const TArray<FVector2D>& GetPoints();

private:
	TArray<FVector2D> Points;

	// A uniform grid used for nearest neighbor searches
	std::vector<FVector2D*>* PointGrid = nullptr;
};

// Noise generated by plotting random points within each cell of a unit grid
class UniformPointNoise : public ScatteredPointNoise
{
public:
	UniformPointNoise(uint32 NewWidth, uint32 NewHeight, uint32 Seed);
	UniformPointNoise(const UniformPointNoise& Copy);

	// Get the point in the provided grid cell
	inline FVector2D GetPoint(uint32 X, uint32 Y) const;
	// Get the nearest point to the provided coordinates
	virtual inline FVector2D GetNearest(FVector2D Location) const override;

	// Sample point noise at the given coordinates
	virtual float Dot(float X, float Y) const override;
	// Sample raw Worley noise at the given coordinates
	virtual float Worley(float X, float Y) const override;

	virtual const TArray<FVector2D>& GetPoints();

private:
	TArray<FVector2D> Points;
};